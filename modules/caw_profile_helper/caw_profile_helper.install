<?php

/**
 * @file
 * caw_profile_helper.install
 */

use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;

/**
 * Adjust field settings for layout paragraphs.
 */
function caw_profile_helper_update_9000() {
  \Drupal::entityTypeManager()
    ->getStorage('paragraphs_type')
    ->create(['id' => 'layout'])
    ->save();

  /** @var \Drupal\field\FieldStorageConfigInterface $field_storage */
  $field_storage = FieldStorageConfig::load('node.su_page_components');
  $field_storage->setSetting('target_type', 'paragraph')->save();
}

/**
 * Migrate data to convert react paragraphs to layout paragraphs.
 */
function caw_profile_helper_update_9001(&$sandbox = []) {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  if (!isset($sandbox['ids'])) {
    /** @var \Drupal\node\NodeInterface $nodes */
    $sandbox['ids'] = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_page')
      ->execute();
    $sandbox['total'] = count($sandbox['ids']);
    $sandbox['run'] = 0;
  }

  $node_ids = array_splice($sandbox['ids'], 0, 20);
  $nodes = $node_storage->loadMultiple($node_ids);
  foreach ($nodes as $node) {
    _caw_profile_helper_convert_paragraph_rows($node);
  }
  $sandbox['#finished'] = empty($sandbox['ids']) ? 1 : ($sandbox['total'] - count($sandbox['ids'])) / $sandbox['total'];
  if ($sandbox['run'] % 4 === 3 && PHP_SAPI == 'cli') {
    // Flush the caches every 4th batch to prevent drush memory running out.
    drupal_flush_all_caches();
  }
  $sandbox['run']++;
}

/**
 * Enable layout paragraphs.
 */
function caw_profile_helper_update_9002() {
  // Make sure to do this last, because of a function in the module that breaks
  // the migration efforts. @see layout_paragraphs_paragraph_presave().
  \Drupal::service('module_installer')->install(['layout_paragraphs']);
}

/**
 * Convert react paragraphs to the new layout paragraphs structure.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _caw_profile_helper_convert_paragraph_rows(NodeInterface $node) {
  $etm = \Drupal::entityTypeManager();
  $row_storage = $etm->getStorage('paragraph_row');
  $paragraph_storage = $etm->getStorage('paragraph');

  $converted_components = [];

  $rows = $node->get('su_page_components')->getValue();
  foreach ($rows as $row) {
    $row = $row_storage->load($row['target_id']);
    $old_components = $row->get('su_page_components')->getValue();
    switch (count($old_components)) {
      case 1:
        $old_component = $paragraph_storage->load($old_components[0]['target_id']);
        /** @var \Drupal\paragraphs\ParagraphInterface $new_component */
        $new_component = $old_component->createDuplicate();
        $new_component->setAllBehaviorSettings([]);
        $new_component->setParentEntity($node, 'su_page_components')->save();
        $old_component->delete();
        $converted_components[] = [
          'target_id' => $new_component->id(),
          'target_revision_id' => $new_component->getRevisionId(),
        ];
        continue 2;

      case 2:
        $layout_id = 'caw_two_column';
        break;

      case 3:
        $layout_id = 'caw_three_column';
        break;
    }

    /** @var \Drupal\paragraphs\ParagraphInterface $new_row */
    $new_row = $paragraph_storage->create(['type' => 'layout']);
    $behavior = [
      'region' => '',
      'parent_uuid' => '',
      'layout' => $layout_id,
      'config' => [],
    ];
    $new_row->setBehaviorSettings('layout_paragraphs', $behavior);
    $new_row->setParentEntity($node, 'su_page_components');
    $new_row->save();
    $converted_components[] = [
      'target_id' => $new_row->id(),
      'target_revision_id' => $new_row->getRevisionId(),
    ];
    $paragraph_storage->resetCache();
    $parent_delta = array_key_last($converted_components);

    $region = 1;
    foreach ($old_components as $component) {
      /** @var \Drupal\paragraphs\ParagraphInterface $component */
      $component = $paragraph_storage->load($component['target_id']);
      $new_component = $component->createDuplicate();
      $new_component->setParentEntity($node, 'su_page_components');
      $behavior = [
        'region' => $region == 1 ? 'first' : ($region == 2 ? 'second' : 'third'),
        'parent_uuid' => $new_row->uuid(),
        'layout' => '',
        'config' => [],
        'parent_delta' => $parent_delta,
      ];
      $new_component->setAllBehaviorSettings(['layout_paragraphs' => $behavior]);
      $new_component->save();
      $component->delete();

      $converted_components[] = [
        'target_id' => $new_component->id(),
        'target_revision_id' => $new_component->getRevisionId(),
      ];

      $region++;
    }
    $row->delete();
  }
  if ($node->get('layout_builder__layout')->count()) {
    _caw_profile_helper_adjust_layout_builder($node);
  }
  $node->set('su_page_components', $converted_components)->save();
}

/**
 * Traverse the layout builder settings and switch the components to LP.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 */
function _caw_profile_helper_adjust_layout_builder(NodeInterface $node) {
  /** @var \Drupal\layout_builder\SectionListInterface $layout */
  $layout = $node->get('layout_builder__layout');
  foreach ($layout->getSections() as $section) {
    foreach ($section->getComponents() as $component) {
      if ($component->getPluginId() == 'field_block:node:stanford_page:su_page_components') {
        $configuration = $component->get('configuration');
        $configuration['formatter']['type'] = 'layout_paragraphs';
        $component->setConfiguration($configuration);
      }
    }
  }
}

/**
 * Set the image for career celebrations with no image.
 */
function caw_profile_helper_update_9003() {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $nids = $node_storage->getQuery()
    ->accessCheck(FALSE)
    ->condition('type', 'caw_careers')
    ->condition('su_careers_image', NULL, 'IS NULL')
    ->execute();
  foreach ($nids as $nid) {
    $node_storage->load($nid)->set('su_careers_image', '21')->save();
  }
}

/**
 * Move menu items to subsite.
 */
function caw_profile_helper_update_9004() {
  $parameters = new MenuTreeParameters();
  /** @var \Drupal\Core\Menu\MenuLinkTree $link_tree_service */
  $link_tree_service = \Drupal::service('menu.link_tree');
  $tree = $link_tree_service->load('main', $parameters);
  foreach ($tree as $element) {
    // Find the manager toolkit, and move all menu items under it into the
    // subsite.
    if ($element->link->getTitle() == 'Manager Toolkit') {
      $route_parameters = $element->link->getRouteParameters();
      // Move the subtree first, then delete the entire subtree.
      caw_profile_helper_move_subtree($element->subtree, [$route_parameters['node']]);
      caw_profile_helper_delete_subtree($element->subtree);
      return;
    }
  }
}

/**
 * Move menu tree elements to subsite.
 *
 * @param \Drupal\Core\Menu\MenuLinkTreeElement[] $subtree
 *   Array of menu tree items.
 * @param array $parents
 *   Array of parent ids.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function caw_profile_helper_move_subtree(array $subtree, array $parents = []) {
  foreach ($subtree as $element) {
    $route_parameters = $element->link->getRouteParameters();
    // Only move menu items that are node links.
    if (!isset($route_parameters['node'])) {
      continue;
    }
    /** @var Drupal\node\NodeInterface $node */
    $node = Node::load($route_parameters['node']);
    $path = $parents;
    $path[] = $node->id();

    $node->book = [
      'nid' => $node->id(),
      'has_children' => 0,
      'original_bid' => 0,
      'parent_depth_limit' => 9 - count($parents),
      'pid' => end($parents),
      'weight' => $element->link->getWeight(),
      'bid' => reset($parents),
    ];;
    $node->save();
    caw_profile_helper_move_subtree($element->subtree, $path);
  }
}

/**
 * Delete all menu items in the subtree.
 *
 * @param \Drupal\Core\Menu\MenuLinkTreeElement[] $subtree
 *   Array of menu tree items.
 */
function caw_profile_helper_delete_subtree(array $subtree) {
  foreach ($subtree as $element) {
    // Recursively go down to the deepest subtree first before starting to
    // delete menu items.
    caw_profile_helper_delete_subtree($element->subtree);
    $element->link->deleteLink();
  }
}

/**
 * Re-save events and news items to reset the paths.
 */
function caw_profile_helper_update_9006(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  if (empty($sandbox)) {
    $sandbox['todo'] = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', ['stanford_event', 'stanford_news'], 'IN')
      ->execute();
    $sandbox['total'] = count($sandbox['todo']);
    $sandbox['#finished'] = 0;
  }

  $node_ids = array_splice($sandbox['todo'], 0, 20);
  foreach ($node_storage->loadMultiple($node_ids) as $node) {
    $node->save();
  }
  $sandbox['#finished'] = 1 - (count($sandbox['todo']) / $sandbox['total']);
}

/**
 * Re-save all taxonomy terms for news and events.
 */
function caw_profile_helper_update_9007() {
  $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $tids = $storage->getQuery()
    ->accessCheck(FALSE)
    ->condition('vid', ['stanford_event_types', 'stanford_news_topics'], 'IN')
    ->execute();
  foreach ($storage->loadMultiple($tids) as $term) {
    $term->save();
  }
}

/**
 * Delete all existing redirects.
 */
function caw_profile_helper_update_9008() {
  $storage = \Drupal::entityTypeManager()->getStorage('redirect');
  foreach ($storage->loadMultiple() as $entity) {
    $entity->delete();
  }
}

/**
 * Re-save Sweeteners & event series to update the aliases.
 */
function caw_profile_helper_update_9009() {
  $pathauto_storage = \Drupal::entityTypeManager()
    ->getStorage('pathauto_pattern');
  /** @var \Drupal\pathauto\PathautoPatternInterface $pattern */
  $pattern = $pathauto_storage->load('caw_sweeteners');
  $pattern->setPattern('benefits-rewards/sweeteners/[node:title]')->save();

  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $node_ids = $node_storage->getQuery()
    ->accessCheck(FALSE)
    ->condition('type', ['caw_sweetener', 'stanford_event_series'], 'IN')
    ->execute();
  foreach ($node_storage->loadMultiple($node_ids) as $node) {
    $node->save();
  }
}

/**
 * Replace cardinal red with Lagunita color.
 */
function caw_profile_helper_update_9010() {
  \Drupal::service('module_installer')->install(['views_event_dispatcher', 'taxonomy_entity_index']);

  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $ids = $paragraph_storage->getQuery()
    ->accessCheck(FALSE)
    ->condition('behavior_settings', '%b1050e%', 'LIKE')
    ->execute();
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  foreach ($paragraph_storage->loadMultiple($ids) as $paragraph) {
    $paragraph->setBehaviorSettings('card_color', ['bg_color' => '006b81']);
    $paragraph->save();
  }
}
