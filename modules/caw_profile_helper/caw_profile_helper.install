<?php

/**
 * @file
 * caw_profile_helper.install
 */

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\NodeInterface;

/**
 * Adjust field settings for layout paragraphs.
 */
function caw_profile_helper_update_9000() {
  \Drupal::entityTypeManager()
    ->getStorage('paragraphs_type')
    ->create(['id' => 'layout'])
    ->save();

  /** @var \Drupal\field\FieldStorageConfigInterface $field_storage */
  $field_storage = FieldStorageConfig::load('node.su_page_components');
  $field_storage->setSetting('target_type', 'paragraph')->save();
}

/**
 * Migrate data to convert react paragraphs to layout paragraphs.
 */
function caw_profile_helper_update_9001(&$sandbox = []) {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  if (!isset($sandbox['ids'])) {
    /** @var \Drupal\node\NodeInterface $nodes */
    $sandbox['ids'] = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_page')
      ->execute();
    $sandbox['total'] = count($sandbox['ids']);
    $sandbox['run'] = 0;
  }

  $node_ids = array_splice($sandbox['ids'], 0, 20);
  $nodes = $node_storage->loadMultiple($node_ids);
  foreach ($nodes as $node) {
    _caw_profile_helper_convert_paragraph_rows($node);
  }
  $sandbox['#finished'] = empty($sandbox['ids']) ? 1 : ($sandbox['total'] - count($sandbox['ids'])) / $sandbox['total'];
  if ($sandbox['run'] % 4 === 3 && PHP_SAPI == 'cli') {
    // Flush the caches every 4th batch to prevent drush memory running out.
    drupal_flush_all_caches();
  }
  $sandbox['run']++;
}

/**
 * Enable layout paragraphs.
 */
function caw_profile_helper_update_9002() {
  // Make sure to do this last, because of a function in the module that breaks
  // the migration efforts. @see layout_paragraphs_paragraph_presave().
  \Drupal::service('module_installer')->install(['layout_paragraphs']);
}

/**
 * Convert react paragraphs to the new layout paragraphs structure.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _caw_profile_helper_convert_paragraph_rows(NodeInterface $node) {
  $etm = \Drupal::entityTypeManager();
  $row_storage = $etm->getStorage('paragraph_row');
  $paragraph_storage = $etm->getStorage('paragraph');

  $converted_components = [];

  $rows = $node->get('su_page_components')->getValue();
  foreach ($rows as $row) {
    $row = $row_storage->load($row['target_id']);
    $old_components = $row->get('su_page_components')->getValue();
    switch (count($old_components)) {
      case 1:
        $old_component = $paragraph_storage->load($old_components[0]['target_id']);
        /** @var \Drupal\paragraphs\ParagraphInterface $new_component */
        $new_component = $old_component->createDuplicate();
        $new_component->setAllBehaviorSettings([]);
        $new_component->setParentEntity($node, 'su_page_components')->save();
        $old_component->delete();
        $converted_components[] = [
          'target_id' => $new_component->id(),
          'target_revision_id' => $new_component->getRevisionId(),
        ];
        continue 2;

      case 2:
        $layout_id = 'caw_two_column';
        break;

      case 3:
        $layout_id = 'caw_three_column';
        break;
    }

    /** @var \Drupal\paragraphs\ParagraphInterface $new_row */
    $new_row = $paragraph_storage->create(['type' => 'layout']);
    $behavior = [
      'region' => '',
      'parent_uuid' => '',
      'layout' => $layout_id,
      'config' => [],
    ];
    $new_row->setBehaviorSettings('layout_paragraphs', $behavior);
    $new_row->setParentEntity($node, 'su_page_components');
    $new_row->save();
    $converted_components[] = [
      'target_id' => $new_row->id(),
      'target_revision_id' => $new_row->getRevisionId(),
    ];
    $paragraph_storage->resetCache();
    $parent_delta = array_key_last($converted_components);

    $region = 1;
    foreach ($old_components as $component) {
      /** @var \Drupal\paragraphs\ParagraphInterface $component */
      $component = $paragraph_storage->load($component['target_id']);
      $new_component = $component->createDuplicate();
      $new_component->setParentEntity($node, 'su_page_components');
      $behavior = [
        'region' => $region == 1 ? 'first' : ($region == 2 ? 'second' : 'third'),
        'parent_uuid' => $new_row->uuid(),
        'layout' => '',
        'config' => [],
        'parent_delta' => $parent_delta,
      ];
      $new_component->setAllBehaviorSettings(['layout_paragraphs' => $behavior]);
      $new_component->save();
      $component->delete();

      $converted_components[] = [
        'target_id' => $new_component->id(),
        'target_revision_id' => $new_component->getRevisionId(),
      ];

      $region++;
    }
    $row->delete();
  }
  if ($node->get('layout_builder__layout')->count()) {
    _caw_profile_helper_adjust_layout_builder($node);
  }
  $node->set('su_page_components', $converted_components)->save();
}

/**
 * Traverse the layout builder settings and switch the components to LP.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 */
function _caw_profile_helper_adjust_layout_builder(NodeInterface $node) {
  /** @var \Drupal\layout_builder\SectionListInterface $layout */
  $layout = $node->get('layout_builder__layout');
  foreach ($layout->getSections() as $section) {
    foreach ($section->getComponents() as $component) {
      if ($component->getPluginId() == 'field_block:node:stanford_page:su_page_components') {
        $configuration = $component->get('configuration');
        $configuration['formatter']['type'] = 'layout_paragraphs';
        $component->setConfiguration($configuration);
      }
    }
  }
}
