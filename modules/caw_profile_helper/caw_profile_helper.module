<?php

/**
 * @file
 * Contains caw_profile_helper.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\block\Entity\Block;
use Drupal\caw_profile_helper\BookManager;
use Drupal\node\NodeInterface;
use Drupal\pathauto\PathautoPatternInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function caw_profile_helper_node_view(array &$build, NodeInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  unset($build['book_navigation']);
}

/**
 * Implements hook_pathauto_pattern_alter().
 */
function caw_profile_helper_pathauto_pattern_alter(PathautoPatternInterface $pattern, array $context) {
  if ($context['module'] == 'node' && $context['bundle'] == 'stanford_page') {
    $book_manager = \Drupal::service('book.manager');
    if ($book_manager->loadBookLink($context['data']['node']->id())) {
      $pattern->setPattern('/[node:book:parents:join-path]/[node:title]');
    }
  }
}

/**
 * Implements hook_block_access().
 */
function caw_profile_helper_block_access(Block $block, $operation, AccountInterface $account) {
  if ($block->id() == 'caw_theme_main_navigation') {
    $subsite = BookManager::getSubsiteNode();
    return AccessResult::forbiddenIf(!is_null($subsite));
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_library_info_alter().
 */
function caw_profile_helper_library_info_alter(&$libraries, $extension) {
  if ($extension == 'book' && isset($libraries['drupal.book'])) {
    unset($libraries['drupal.book']['js']);
    $libraries['drupal.book']['dependencies'][] = 'caw_profile_helper/book.admin';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function caw_profile_helper_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->getFormObject()->getEntity()->bundle() != 'stanford_page') {
    return;
  }
  $form['book']['#title'] = t('Subsite Outline');
  $form['book']['bid']['#title'] = t('Subsite');
  $form['book']['bid']['#description'] = t('Your page will be a part of the selected subsite');
  $form['book']['bid']['#options']['new'] = t('- Create a new Subsite -');
  $form['book']['pid']['#description'] = t('The parent page in the subsite. The maximum depth for a subsite and all child pages is 9. Some pages in the selected subsite may not be available as parents if selecting them would exceed this limit.');
}

/**
 * Implements hook_views_query_alter().
 */
function caw_profile_helper_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // Only modify the queries for media related views.
  if (!in_array($view->id(), ['media_library', 'media'])) {
    return;
  }
  $replacements = [
    'su_gallery_image_target_id' => 'su_gallery_image_alt',
    'field_media_image_target_id' => 'field_media_image_alt',
  ];

  // Since views don't have a way to filter for alt text on images, we've added
  // a combined filter that uses the image target_id value. But instead of
  // using the file ID, we replace the conditions to filter for the alt text of
  // the images.
  foreach ($query->where as &$condition_group) {
    foreach ($condition_group['conditions'] as &$condition) {
      if (substr($condition['field'], 0, 9) == 'CONCAT_WS') {
        $condition['field'] = strtr($condition['field'], $replacements);
      }
    }
  }
}
