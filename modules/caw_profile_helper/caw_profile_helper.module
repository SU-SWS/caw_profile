<?php

/**
 * @file
 * Contains caw_profile_helper.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Template\Attribute;
use Drupal\block\Entity\Block;
use Drupal\caw_profile_helper\BookManager;
use Drupal\node\NodeInterface;
use Drupal\pathauto\PathautoPatternInterface;

/**
 * Implements hook_contextual_links_alter().
 */
function caw_profile_helper_contextual_links_alter(array &$links, $group, array $route_parameters) {
  if (in_array($group, ['paragraph'])) {
    $links = [];
    return;
  }
  $entity_types = ['node' => 'Content', 'media' => 'Media Item'];
  if (isset($entity_types[$group])) {
    foreach ($links as &$link) {
      $link['title'] .= " {$entity_types[$group]}";
    }
  }
}

/**
 * Implements hook_theme().
 */
function caw_profile_helper_theme($existing, $type, $theme, $path) {
  // Duplicate the patterns_use_wrapper theme so we can modify it to work with
  // layout paragraphs.
  return ['patterns_use_wrapper_admin' => ['variables' => ['use' => NULL]]];
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function caw_profile_helper_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if (strpos($hook, 'pattern_') === 0 && _caw_profile_helper_is_editing_layout_paragraphs()) {
    // Add the theme suggestion when we're editing layout builder components.
    $suggestions[] = 'patterns_use_wrapper_admin';
  }
}

/**
 * Implements hook_preprocess().
 */
function caw_profile_helper_preprocess(&$variables, $hook) {
  // If not editing LP page, we don't want to do anything.
  if (!_caw_profile_helper_is_editing_layout_paragraphs()) {
    return;
  }

  // Remove any contextual links on the media/paragraphs/other entities when
  // editing the layout paragraphs page.
  if (!empty($variables['elements']['#entity_type'])) {
    unset($variables['title_suffix']['contextual_links']);
  }

  // Manipulate the render array for the entity view so that we can pick it up
  // in the later hook on the pattern.
  if ($hook == 'ds_entity_view') {
    if (!empty($variables['content']['controls'])) {
      $variables['content']['#context']['layout_paragraphs'] = [
        'controls' => $variables['content']['controls'],
        'insert_before' => $variables['content']['insert_before'],
        'insert_after' => $variables['content']['insert_after'],
      ];
    }
  }

  if (strpos($hook, 'pattern_') === 0) {

    // Grab the layout paragraphs parts from the context that we saved above,
    // and put them into a variable for use in the patterns_use_wrapper_admin
    // template. Also move the normal attributes to a wrapper so that the
    // layout paragraph attributes will be added to the wrapper around the
    // layout paragraph controls/insert buttons.
    $variables['layout_paragraphs'] = $variables['context']->getProperty('layout_paragraphs');
    $variables['wrapper_attributes'] = $variables['attributes'];
    $variables['attributes'] = new Attribute();
  }
}

/**
 * Is the user currently on editing the layout paragraphs?
 *
 * @return bool
 *   True if the route matches known routes for LP.
 */
function _caw_profile_helper_is_editing_layout_paragraphs() {
  $layout_paragraphs_routes = ['entity.node.edit_form'];
  $route_name = \Drupal::routeMatch()->getRouteName();
  return in_array($route_name, $layout_paragraphs_routes) || strpos($route_name, 'layout_paragraphs.') === 0;
}

/**
 * Implements hook_page_attachments().
 */
function caw_profile_helper_page_attachments(array &$attachments) {
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $attachments['#attached']['library'][] = 'caw_profile_helper/admin';
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function caw_profile_helper_node_view(array &$build, NodeInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  unset($build['book_navigation']);
}

/**
 * Implements hook_pathauto_pattern_alter().
 */
function caw_profile_helper_pathauto_pattern_alter(PathautoPatternInterface $pattern, array $context) {
  if ($context['module'] == 'node' && $context['bundle'] == 'stanford_page') {
    $book_manager = \Drupal::service('book.manager');
    if ($book_manager->loadBookLink($context['data']['node']->id())) {
      $pattern->setPattern('/[node:book:parents:join-path]/[node:title]');
    }
  }
}

/**
 * Implements hook_block_access().
 */
function caw_profile_helper_block_access(Block $block, $operation, AccountInterface $account) {
  if ($block->id() == 'caw_theme_main_navigation') {
    $subsite = BookManager::getSubsiteNode();
    return AccessResult::forbiddenIf(!is_null($subsite));
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_library_info_alter().
 */
function caw_profile_helper_library_info_alter(&$libraries, $extension) {
  if ($extension == 'book' && isset($libraries['drupal.book'])) {
    unset($libraries['drupal.book']['js']);
    $libraries['drupal.book']['dependencies'][] = 'caw_profile_helper/book.admin';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function caw_profile_helper_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->getFormObject()->getEntity()->bundle() != 'stanford_page') {
    return;
  }
  $form['book']['#title'] = t('Subsite Outline');
  $form['book']['bid']['#title'] = t('Subsite');
  $form['book']['bid']['#description'] = t('Your page will be a part of the selected subsite');
  $form['book']['bid']['#options']['new'] = t('- Create a new Subsite -');
  $form['book']['pid']['#description'] = t('The parent page in the subsite. The maximum depth for a subsite and all child pages is 9. Some pages in the selected subsite may not be available as parents if selecting them would exceed this limit.');
}

/**
 * Implements hook_ckeditor_plugin_info_alter().
 */
function caw_profile_helper_ckeditor_plugin_info_alter(array &$plugins) {
  unset($plugins['fixed_toolbar']);
}
