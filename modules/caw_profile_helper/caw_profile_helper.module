<?php

/**
 * @file
 * Contains caw_profile_helper.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\block\BlockInterface;
use Drupal\caw_profile_helper\BookManager;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\pathauto\PathautoPatternInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\Core\Cache\Cache;

function mikes() {
  $field_name = 'caw_benefits_foobarbaz';
  $options = ['below' => 'caw_benefits_med_maternity_stay'];
  $label = NULL;
  /** @var \Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay $view */
  $view = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('node.caw_benefits.default');
  foreach ($view->getSections() as $section) {
    foreach ($section->getComponents() as $component) {
      $component_config = $component->get('configuration');
      if (str_ends_with($component->getPluginId(), $options['below'])) {
        $uuid = \Drupal::service('uuid')->generate();
        $new_config = $component_config;
        $new_config['id'] = str_replace($options['below'], $field_name, $new_config['id']);
        $new_config['label'] = $label?: $field_name;
        $new_component = new \Drupal\layout_builder\SectionComponent($uuid, $component->getRegion(),$new_config);
        $new_component->setWeight($component->getWeight() + 1);

        $section->insertAfterComponent($component->getUuid(), $new_component);
        $view->save();
        return;
      }
    }
  }
}

/**
 * Implements hook_paragraphs_behavior_info_alter().
 */
function caw_profile_helper_paragraphs_behavior_info_alter(&$paragraphs_behavior) {
  $paragraphs_behavior['hero_pattern']['class'] = '\Drupal\caw_profile_helper\Plugin\paragraphs\Behavior\CawHeroBehavior';
  $paragraphs_behavior['su_card_styles']['class'] = '\Drupal\caw_profile_helper\Plugin\paragraphs\Behavior\CawCardBehavior';
}

/**
 * Implements hook_contextual_links_alter().
 */
function caw_profile_helper_contextual_links_alter(array &$links, $group, array $route_parameters) {
  if (in_array($group, ['paragraph'])) {
    $links = [];
    return;
  }
  $entity_types = ['node' => 'Content', 'media' => 'Media Item'];
  if (isset($entity_types[$group])) {
    foreach ($links as &$link) {
      $link['title'] .= " {$entity_types[$group]}";
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function caw_profile_helper_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (preg_match('/node_.*_book_outline_form/', $form_id)) {
    caw_profile_helper_form_node_form_alter($form, $form_state);
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function caw_profile_helper_local_tasks_alter(&$local_tasks) {
  if (isset($local_tasks['entity.node.book_outline_form'])) {
    $local_tasks['entity.node.book_outline_form']['title'] = t('Subsite Outline');
  }
}

/**
 * Implements hook_page_attachments().
 */
function caw_profile_helper_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'caw_profile_helper/global';
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $attachments['#attached']['library'][] = 'caw_profile_helper/admin';
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function caw_profile_helper_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $element['#attached']['library'][] = 'caw_profile_helper/admin';
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function caw_profile_helper_field_widget_fontawesome_icon_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $children = Element::children($element['settings']);
  $children = array_filter($children, function($child) {
    return !in_array($child, ['style', 'size']);
  });
  // Hide all the advanced options except the style and size options.
  foreach ($children as $child) {
    $element['settings'][$child]['#access'] = FALSE;
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function caw_profile_helper_node_view(array &$build, NodeInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  unset($build['book_navigation']);
}

/**
 * Implements hook_pathauto_pattern_alter().
 */
function caw_profile_helper_pathauto_pattern_alter(PathautoPatternInterface $pattern, array $context) {
  if ($context['module'] == 'node' && $context['bundle'] == 'stanford_page') {
    $book_manager = \Drupal::service('book.manager');
    if ($book_manager->loadBookLink($context['data']['node']->id())) {
      $pattern->setPattern('/[node:book:parents:join-path]/[node:title]');
    }
  }
  if ($context['module'] == 'node' && $context['bundle'] == 'stanford_event_series') {
    /** @var NodeInterface $node */
    $node = $context['data']['node'];
    if ($node->get('su_event_series_type')->count()) {
      $tid = $node->get('su_event_series_type')->getString();
      /** @var \Drupal\taxonomy\TermInterface $term */
      $term = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->load($tid);
      if ($term && $term->label() == 'Course Catalog') {
        $pattern->setPattern('learning-stanford/professional-development/course-catalog/[node:title]');
      }
    }
  }
}

/**
 * Implements hook_block_access().
 */
function caw_profile_helper_block_access(BlockInterface $block, $operation, AccountInterface $account) {
  if ($block->id() == 'caw_theme_main_navigation') {
    $subsite = BookManager::getSubsiteNode();
    return AccessResult::forbiddenIf(!is_null($subsite));
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_library_info_alter().
 */
function caw_profile_helper_library_info_alter(&$libraries, $extension) {
  // Disable confirm leave library during testing.
  if ($extension == 'confirm_leave' && getenv('CI')) {
    unset($libraries['confirm-leave']);
  }
  if ($extension == 'book' && isset($libraries['drupal.book'])) {
    unset($libraries['drupal.book']['js']);
    $libraries['drupal.book']['dependencies'][] = 'caw_profile_helper/book.admin';
  }
  if ($extension == 'ui_patterns' && isset($libraries['card.card'])) {
    $libraries['card.card']['dependencies'][] = 'caw_profile_helper/patterns.card';
  }
  if ($extension == 'ui_patterns' && isset($libraries['hero.hero'])) {
    $libraries['hero.hero']['dependencies'][] = 'caw_profile_helper/patterns.hero';
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function caw_profile_helper_paragraph_view_alter(array &$build, ParagraphInterface $paragraph, EntityViewDisplayInterface $display) {
  switch ($paragraph->bundle()) {
    case 'stanford_card':
      // If an uploaded media exist, do not display the icon.
      if ($paragraph->get('su_card_media')->count()) {
        unset($build['su_card_icon']);
      }
      // If no media exists but there is an icon, wrap the display in the
      // modifier class.
      elseif ($paragraph->get('su_card_icon')->count()) {
        $build['#attributes']['class'][] = 'su-card--icon';
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function caw_profile_helper_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];
  $ptype = Html::cleanCssIdentifier("ptype-" . $paragraph->bundle());
  $variables['attributes']['class'][] = $ptype;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function caw_profile_helper_preprocess_ds_entity_view(&$variables) {
  if (!empty($variables['attributes']['class'])) {
    $position = array_search('su-card--icon', $variables['attributes']['class']);
    // Remove the `su-card--icon` class because it's already passed down to the
    // pattern.
    if ($position !== FALSE) {
      unset($variables['attributes']['class'][$position]);
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function caw_profile_helper_form_node_form_alter(&$form, FormStateInterface $form_state) {
  if ($form_state->getFormObject()
      ->getEntity()
      ->bundle() != 'stanford_page' || empty($form['book'])) {
    // Don't allow any other content to be added to subsites.
    unset($form['book']);
    return;
  }
  $form['book']['#title'] = t('Subsite Outline');
  $form['book']['bid']['#title'] = t('Subsite');
  $form['book']['bid']['#description'] = t('Your page will be a part of the selected subsite');
  if (isset($form['book']['bid']['#options']['new'])) {
    $form['book']['bid']['#options']['new'] = t('- Create a new Subsite -');
  }
  $form['book']['pid']['#description'] = t('The parent page in the subsite. The maximum depth for a subsite and all child pages is 9. Some pages in the selected subsite may not be available as parents if selecting them would exceed this limit.');
  $form['actions']['submit']['#submit'][] = '_caw_profile_helper_subsite_save';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function caw_profile_helper_form_book_remove_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = '_caw_profile_helper_subsite_remove_save';
}

/**
 * Clear node cache tags when removing from a subsite.
 *
 * @param array $form
 *   Complete form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Submitted form state.
 */
function _caw_profile_helper_subsite_remove_save(&$form, FormStateInterface $form_state) {
  $node = $form_state->getBuildInfo()['args'][0];
  Cache::invalidateTags($node->getCacheTags());
}

/**
 * Clear node cache tags when adding to a subsite.
 *
 * @param array $form
 *   Complete form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Submitted form state.
 */
function _caw_profile_helper_subsite_save(&$form, FormStateInterface $form_state) {
  $node = $form_state->getBuildInfo()['callback_object']->getEntity();
  Cache::invalidateTags($node->getCacheTags());
}

/**
 * Implements hook_views_pre_build().
 */
function caw_profile_helper_views_pre_build(ViewExecutable $view) {
  if ($view->id() == 'caw_benefits' && $view->current_display == 'filtering_list') {
    if (!empty($view->args[0]) && strlen($view->args[0]) == 4) {
      $view->args[0] .= '-01-01';
    }
    else {
      // Use the current year if argument is not provided, but use next year if
      // it's currently November or December.
      $year = date('m') >= 11 ? (int) date('Y') + 1 : (int) date('Y');
      $view->args = ["$year-01-01"];
    }
  }
}

/**
 * Implements hook_views_pre_execute().
 */
function caw_profile_helper_views_pre_execute(ViewExecutable $view) {
  if (_stanford_layout_paragraphs_is_editing_layout_paragraphs()) {
    $current_limit = $view->query->getLimit();
    if ($current_limit <= 0 || $current_limit > 5) {
      $view->query->setLimit(5);
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function caw_profile_helper_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // Only modify the queries for media related views.
  if (!in_array($view->id(), ['media_library', 'media'])) {
    return;
  }
  $replacements = [
    'su_gallery_image_target_id' => 'su_gallery_image_alt',
    'field_media_image_target_id' => 'field_media_image_alt',
  ];

  // Since views don't have a way to filter for alt text on images, we've added
  // a combined filter that uses the image target_id value. But instead of
  // using the file ID, we replace the conditions to filter for the alt text of
  // the images.
  foreach ($query->where as &$condition_group) {
    foreach ($condition_group['conditions'] as &$condition) {
      if (substr($condition['field'], 0, 9) == 'CONCAT_WS') {
        $condition['field'] = strtr($condition['field'], $replacements);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function caw_profile_helper_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $form_state->get('view');
  if ($view->id() == 'caw_benefits' && $view->current_display == 'filtering_list') {
    $form['available']['#chosen'] = FALSE;
    $form['type']['#chosen'] = FALSE;

    // Add some javascript settings to help know which options have which nodes
    // associated to them.
    $form['#attached']['drupalSettings']['cawBenefits'] = [
      'available' => [],
      'type' => [],
    ];

    foreach (array_keys($form['available']['#options']) as $available) {
      $form['#attached']['drupalSettings']['cawBenefits']['available'][$available] = _caw_profile_helper_get_benefit_ids('su_benefits_offered', $available);
    }
    foreach (array_keys($form['type']['#options']) as $type) {
      $form['#attached']['drupalSettings']['cawBenefits']['type'][$type] = _caw_profile_helper_get_benefit_ids('su_benefit_type', $type);
    }
  }
  if ($view->id() == 'caw_careers') {
    $form['honored']['#access'] = empty($view->args);
  }
}

/**
 * Get a list of node ids with the given field value.
 *
 * @param string $field
 *   Field machine name.
 * @param mixed $value
 *   Field value.
 *
 * @return array
 *   Array of entity ids.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _caw_profile_helper_get_benefit_ids($field, $value): array {
  $nids = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->getQuery()
    ->accessCheck(TRUE)
    ->condition('status', 1)
    ->condition('type', 'caw_benefits')
    ->condition($field, $value)
    ->execute();
  return array_values($nids);
}
